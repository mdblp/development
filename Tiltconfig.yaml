# Copy to `local/Tiltconfig.yaml` and update as needed
# To run local development images for the tidepool services, uncomment the `image` and `hostPath`
# parameters, and update the `hostPath` if you've checked the repo out to a different location.

### Global Config Start ###

global:
  gateway:
    default:
      protocol: http
      host: localhost:3000
      domain: localhost
    proxy:
      name: gateway-proxy
      namespace: default
  ports:
    viz:
      stories: 8083
      typestories: 8082
  secret: # we provision these in Tiltfile directly with kubectl
    enabled: false
    templated: false
    generated: false
  securityContext: &global-security-context
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
      - ALL
### Global Config End ###

### Gateway Config Start ###
gateway-proxy:
  portForwards: ['3000']

gloo:
  enabled: false # we provision this in Tiltfile directly with kubectl

glooingress:
  virtualServices:
    http:
      dnsNames: ["*"]
      port: "3000"

apiServer:
  enable: false
### Gateway Config End ###

mongodb:
  persistent: true
  enabled: false # False to disable the helm-chart-defined mongo, as we deploy our own directly within the Tiltfile
  useExternal: false # Set to true and update the global mongo config below if using an external mongo db
  hostPath: '/data/db' # Note: this path is relative to the k8s server container defined in `docker-compose.k8s.yml`. Local machine path is volume-mounted using the TIDEPOOL_DOCKER_MONGO_VOLUME environment variable.
  portForwards: ['27017']

mongo:
  secret:
    _data:
      Scheme: "mongodb"
      Addresses: "mongodb"
      Username: ""
      Password: ""
      Database: "admin"
      Tls: "false"
      OptParams: ""
### MongoDB Config End ###

### Carelink API Config Start ###carelink:
carelink:
  secret:
    enabled: false
    data_:
      CarelinkSalt: ""
### Carelink API Config End ###

### Dexcom API Config Start ###
dexcom:
  secret:
    enabled: false
    data_:
      ClientId: ""
      ClientSecret: ""
      StateSalt: ""
### Dexcom API Config End ###

### User Data Secret Config Start ###
userdata:
  secret:
    enabled: false
    data_:
      ServiceAuth: "This secret is used to encrypt the group id stored in the DB for gatekeeper" # Replaces previously used TIDEPOOL_DOCKER_GATEKEEPER_SECRET env variable
      UserIdSalt: "This secret is used to salt the user id stored in the DB for highwater" # Replaces previously used TIDEPOOL_DOCKER_HIGHWATER_SALT env variable
      PasswordSalt: "This secret is used to salt the user password stored in the DB for shoreline" # Replaces previously used TIDEPOOL_DOCKER_SHORELINE_SALT env variable
### User Data Secret Config Start ###

### Tidepool Services Config Start ###
auth:
  deployment:
    # image: tidepool-k8s-auth
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.auth'
  rebuildCommand: 'make service-build'

blip:
  deployment:
    # image: tidepool-k8s-blip
  # hostPath: ../blip
  containerPath: '/app'
  apiHost: 'http://localhost:3000'
  webpackDevTool: cheap-module-eval-source-map
  webpackDevToolViz: cheap-source-map # Suggest changing `cheap-source-map` to the slower, but far more helpful `source-map` if debugging errors in viz package files
  webpackPublicPath: 'http://localhost:3000'
  disableDevTools: false # Suggest changing to `true` if working with large data sets in local development build
  linkedPackages:
    - name: tideline
      packageName: tideline
      hostPath: ../tideline
      enabled: false

    - name: tidepool-platform-client
      packageName: tidepool-platform-client
      hostPath: ../platform-client
      enabled: false

    - name: viz
      packageName: '@tidepool/viz'
      hostPath: ../viz
      enabled: false
  securityContext: *global-security-context
  buildTarget: development # set to `production` to run minified production builds
  restartContainer: false # Set to `true` if buildTarget = `production`

blob:
  deployment:
    # image: tidepool-k8s-blob
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.blob'
  rebuildCommand: 'make service-build'

data:
  deployment:
    # image: tidepool-k8s-data
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.data'
  rebuildCommand: 'make service-build'

export:
  deployment:
    # image: tidepool-k8s-export
  # hostPath: ../export
  containerPath: '/app'

gatekeeper:
  deployment:
    # image: tidepool-k8s-gatekeeper
  # hostPath: ../gatekeeper
  containerPath: '/app'

highwater:
  deployment:
    # image: tidepool-k8s-highwater
  # hostPath: ../highwater
  containerPath: '/app'

hydrophone:
  deployment:
    # image: tidepool-k8s-hydrophone
  # hostPath: '~/go/src/github.com/tidepool-org/hydrophone'
  containerPath: '/go/src/github.com/tidepool-org/hydrophone'
  rebuildCommand: './build.sh'

image:
  deployment:
    # image: tidepool-k8s-image
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.image'
  rebuildCommand: 'make service-build'

jellyfish:
  deployment:
    # image: tidepool-k8s-jellyfish
  # hostPath: ../jellyfish
  containerPath: '/app'

message-api:
  deployment:
    # image: tidepool-k8s-message-api
  # hostPath: ../message-api
  containerPath: '/app'

migrations:
  deployment:
    # image: tidepool-k8s-migrations
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.migrations'
  rebuildCommand: 'make service-build'

notification:
  deployment:
    # image: tidepool-k8s-notification
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.notification'
  rebuildCommand: 'make service-build'

seagull:
  deployment:
    # image: tidepool-k8s-seagull
  # hostPath: ../seagull
  containerPath: '/app'

shoreline:
  deployment:
    # image: tidepool-k8s-shoreline
  # hostPath: '~/go/src/github.com/tidepool-org/shoreline'
  containerPath: '/go/src/github.com/tidepool-org/shoreline'
  rebuildCommand: './build.sh'
  configmap:
    enabled: false
    data:
      ClinicDemoUserId: ""

task:
  deployment:
    # image: tidepool-k8s-task
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.task'
  rebuildCommand: 'make service-build'

tide-whisperer:
  deployment:
    # image: tidepool-k8s-tide-whisperer
  # hostPath: '~/go/src/github.com/tidepool-org/tide-whisperer'
  containerPath: '/go/src/github.com/tidepool-org/tide-whisperer'
  rebuildCommand: './build.sh'

tools:
  deployment:
    # image: tidepool-k8s-tools
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.tools'
  rebuildCommand: 'make service-build'

user:
  deployment:
    # image: tidepool-k8s-user
  # hostPath: '~/go/src/github.com/tidepool-org/platform'
  containerPath: '/go/src/github.com/tidepool-org/platform'
  dockerFile: 'Dockerfile.user'
  rebuildCommand: 'make service-build'
### Tidepool Services Config End ###
