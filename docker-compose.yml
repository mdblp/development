version: '3.4'

services:
  mongo:
    image: mongo:3.2
    volumes:
      - ${MONGO_VOLUME}:/data/db
    ports:
      - '27017:27017'

  blip:
    image: tidepool/blip
    depends_on:
      - hakken
    # build: ${BLIP_DIR}
    # volumes:
    #   - ${BLIP_DIR}:/app:cached
    #   - /app/node_modules
    #   - /app/dist
    #   - ${PLATFORM_CLIENT_DIR}:/tidepool-platform-client:cached
    #   - /tidepool-platform-client/node_modules
    #   - ${TIDELINE_DIR}:/tideline:cached
    #   - /tideline/node_modules
    #   - ${VIZ_DIR}:/@tidepool/viz:cached
    #   - viz-dist:/@tidepool/viz/dist:ro
    ports:
      - '3000:3000'
    environment:
      API_HOST: http://${API_HOST}:8009
      DEV_TOOLS: ${DEV_TOOLS:-true}
      DISCOVERY_HOST: ${HAKKEN_HOST}:8000
      NODE_ENV: development
      PORT: '3000'
      PUBLISH_HOST: ${HAKKEN_HOST}
      WEBPACK_DEVTOOL: cheap-module-eval-source-map

  gatekeeper:
    image: tidepool/gatekeeper
    depends_on:
      - hakken
    # build: ${GATEKEEPER_DIR}
    # volumes:
    #   - ${GATEKEEPER_DIR}:/app:cached
    #   - /app/node_modules
    ports:
      - '${GATEKEEPER_PORT_PREFIX}9123:${GATEKEEPER_PORT_PREFIX}9123'
    environment:
      DISCOVERY_HOST: ${HAKKEN_HOST}:8000
      GATEKEEPER_SECRET: '${GATEKEEPER_SECRET}'
      MONGO_CONNECTION_STRING: mongodb://${MONGO_HOST}/gatekeeper?ssl=${MONGO_TLS}
      NODE_ENV: development
      PORT: '${GATEKEEPER_PORT_PREFIX}9123'
      PUBLISH_HOST: ${HAKKEN_HOST}
      SERVER_SECRET: '${SERVER_SECRET}'
      SERVICE_NAME: gatekeeper
      USER_API_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${SHORELINE_HOST}:9107"}]}'

  hakken:
    image: tidepool/hakken
    # build: ${HAKKEN_DIR}
    # volumes:
    #   - ${HAKKEN_DIR}:/app:cached
    #   - /app/node_modules
    ports:
      - '${HAKKEN_PORT_PREFIX}8000:${HAKKEN_PORT_PREFIX}8000'
    environment:
      ANNOUNCE_HOST: ${HAKKEN_HOST}
      DISCOVERY_HEARTBEAT_INTERVAL: '10000'
      DISCOVERY_HOST: ${HAKKEN_HOST}:8000
      LOG_HEARTBEATS: 'false'
      NODE_ENV: development
      PORT: '${HAKKEN_PORT_PREFIX}8000'

  highwater:
    image: tidepool/highwater
    depends_on:
      - hakken
    # build: ${HIGHWATER_DIR}
    # volumes:
    #   - ${HIGHWATER_DIR}:/app:cached
    #   - /app/node_modules
    ports:
      - '${HIGHWATER_PORT_PREFIX}9191:${HIGHWATER_PORT_PREFIX}9191'
    environment:
      DISCOVERY_HOST: ${HAKKEN_HOST}:8000
      METRICS_APIKEY: ''
      METRICS_UCSF_APIKEY: ''
      NODE_ENV: development
      PORT: '${HIGHWATER_PORT_PREFIX}9191'
      PUBLISH_HOST: ${HAKKEN_HOST}
      SALT_DEPLOY: '${HIGHWATER_SALT}'
      SERVER_SECRET: '${SERVER_SECRET}'
      SERVICE_NAME: highwater
      USER_API_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${SHORELINE_HOST}:9107"}]}'

  hydrophone:
    image: tidepool/hydrophone
    depends_on:
      - hakken
    # build:
    #   context: ${HYDROPHONE_DIR}
    #   target: ${HYDROPHONE_BUILD_TARGET}
    # volumes:
    #   - ${HYDROPHONE_DIR}:/go/src/github.com/tidepool-org/hydrophone:cached
    #   - /go/src/github.com/tidepool-org/hydrophone/dist
    ports:
      - '${HYDROPHONE_PORT_PREFIX}9157:${HYDROPHONE_PORT_PREFIX}9157'
    environment:
      TIDEPOOL_HYDROPHONE_ENV: |
        {
            "gatekeeper": {"serviceSpec": {"type": "static", "hosts": ["http://${GATEKEEPER_HOST}:9123"]}},
            "hakken": {"host": "${HAKKEN_HOST}:8000"},
            "highwater": {
                "metricsSource": "hydrophone",
                "metricsVersion": "v0.0.1",
                "name": "highwater",
                "serviceSpec": {"type": "static", "hosts": ["http://${HIGHWATER_HOST}:9191"]}
            },
            "seagull": {"serviceSpec": {"type": "static", "hosts": ["http://${SEAGULL_HOST}:9120"]}},
            "shoreline": {
                "name": "hydrophone",
                "secret": "${SERVER_SECRET}",
                "serviceSpec": {"type": "static", "hosts": ["http://${SHORELINE_HOST}:9107"]},
                "tokenRefreshInterval": "1h"
            }
        }
      TIDEPOOL_HYDROPHONE_SERVICE: |
        {
            "hydrophone": {
                "assetUrl": "https://s3-us-west-2.amazonaws.com/tidepool-dev-asset",
                "serverSecret": "${SERVER_SECRET}",
                "webUrl": "http://${API_HOST}:3000"
            },
            "mongo": {
                "connectionString": "mongodb://${MONGO_HOST}/confirm?ssl=${MONGO_TLS}"
            },
            "service": {
                "certFile": "config/cert.pem",
                "host": "localhost:${HYDROPHONE_PORT_PREFIX}9157",
                "keyFile": "config/key.pem",
                "protocol": "http",
                "service": "hydrophone"
            },
            "sesEmail": {
                "accessKey": "${HYDROPHONE_AWS_ACCESS_KEY_ID}",
                "fromAddress": "${HYDROPHONE_FROM_ADDRESS}",
                "secretKey": "${HYDROPHONE_AWS_SECRET_ACCESS_KEY}",
                "serverEndpoint": "https://email.us-west-2.amazonaws.com"
            }
        }

  jellyfish:
    image: tidepool/jellyfish
    depends_on:
      - hakken
    # build: ${JELLYFISH_DIR}
    # volumes:
    #   - ${JELLYFISH_DIR}:/app:cached
    #   - /app/node_modules
    ports:
      - '${JELLYFISH_PORT_PREFIX}9122:${JELLYFISH_PORT_PREFIX}9122'
    environment:
      DISCOVERY_HOST: ${HAKKEN_HOST}:8000
      GATEKEEPER_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${GATEKEEPER_HOST}:9123"}]}'
      MINIMUM_UPLOADER_VERSION: '0.251.0'
      MONGO_CONNECTION_STRING: mongodb://${MONGO_HOST}/data?ssl=${MONGO_TLS}
      NODE_ENV: development
      PORT: '${JELLYFISH_PORT_PREFIX}9122'
      PUBLISH_HOST: ${HAKKEN_HOST}
      SALT_DEPLOY: '${JELLYFISH_SALT}'
      SCHEMA_VERSION: '3'
      SEAGULL_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${SEAGULL_HOST}:9120"}]}'
      SERVER_SECRET: '${SERVER_SECRET}'
      SERVE_STATIC: dist
      SERVICE_NAME: jellyfish
      USER_API_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${SHORELINE_HOST}:9107"}]}'

  message-api:
    image: tidepool/message-api
    depends_on:
      - hakken
    # build: ${MESSAGE_API_DIR}
    # volumes:
    #   - ${MESSAGE_API_DIR}:/app:cached
    #   - /app/node_modules
    ports:
      - '${MESSAGE_API_PORT_PREFIX}9119:${MESSAGE_API_PORT_PREFIX}9119'
    environment:
      DISCOVERY_HOST: ${HAKKEN_HOST}:8000
      GATEKEEPER_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${GATEKEEPER_HOST}:9123"}]}'
      METRICS_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${HIGHWATER_HOST}:9191"}]}'
      MONGO_CONNECTION_STRING: mongodb://${MONGO_HOST}/messages?ssl=${MONGO_TLS}
      NODE_ENV: development
      PORT: '${MESSAGE_API_PORT_PREFIX}9119'
      PUBLISH_HOST: ${HAKKEN_HOST}
      SEAGULL_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${SEAGULL_HOST}:9120"}]}'
      SERVER_NAME: message-api
      SERVER_SECRET: '${SERVER_SECRET}'
      SERVICE_NAME: message-api
      USER_API_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${SHORELINE_HOST}:9107"}]}'

  platform-auth:
    image: tidepool/platform-auth
    # build:
    #   context: ${PLATFORM_AUTH_DIR}
    #   dockerfile: Dockerfile.auth
    #   target: ${PLATFORM_AUTH_BUILD_TARGET}
    # volumes:
    #   - ${PLATFORM_AUTH_DIR}:/go/src/github.com/tidepool-org/platform:cached
    #   - /go/src/github.com/tidepool-org/platform/_bin
    ports:
      - '${PLATFORM_AUTH_PORT_PREFIX}9222:${PLATFORM_AUTH_PORT_PREFIX}9222'
    environment: &platform-environment
      TIDEPOOL_ENV: local
      TIDEPOOL_LOGGER_LEVEL: debug
      TIDEPOOL_STORE_ADDRESSES: ${MONGO_HOST}
      TIDEPOOL_STORE_DATABASE: tidepool
      TIDEPOOL_STORE_TLS: ${MONGO_TLS}
      TIDEPOOL_SERVER_TLS: 'false'
      TIDEPOOL_CONFIRMATION_STORE_DATABASE: confirm
      TIDEPOOL_TASK_QUEUE_WORKERS: 5
      TIDEPOOL_TASK_QUEUE_DELAY: 5
      TIDEPOOL_DEPRECATED_DATA_STORE_DATABASE: data
      TIDEPOOL_MESSAGE_STORE_DATABASE: messages
      TIDEPOOL_PERMISSION_STORE_DATABASE: gatekeeper
      TIDEPOOL_PERMISSION_STORE_SECRET: '${GATEKEEPER_SECRET}'
      TIDEPOOL_PROFILE_STORE_DATABASE: seagull
      TIDEPOOL_SESSION_STORE_DATABASE: user
      TIDEPOOL_SYNC_TASK_STORE_DATABASE: data
      TIDEPOOL_USER_STORE_DATABASE: user
      TIDEPOOL_USER_STORE_PASSWORD_SALT: '${SHORELINE_SALT}'
      TIDEPOOL_AUTH_CLIENT_ADDRESS: http://${PLATFORM_AUTH_HOST}:9222
      TIDEPOOL_BLOB_CLIENT_ADDRESS: http://${PLATFORM_BLOB_HOST}:9225
      TIDEPOOL_DATA_CLIENT_ADDRESS: http://${PLATFORM_DATA_HOST}:9220
      TIDEPOOL_DATA_SOURCE_CLIENT_ADDRESS: http://${PLATFORM_DATA_HOST}:9220
      TIDEPOOL_METRIC_CLIENT_ADDRESS: http://${STYX_HOST}:8009
      TIDEPOOL_NOTIFICATION_CLIENT_ADDRESS: http://${PLATFORM_NOTIFICATION_HOST}:9223
      TIDEPOOL_PERMISSION_CLIENT_ADDRESS: http://${GATEKEEPER_HOST}:9123
      TIDEPOOL_TASK_CLIENT_ADDRESS: http://${PLATFORM_TASK_HOST}:9224
      TIDEPOOL_USER_CLIENT_ADDRESS: http://${STYX_HOST}:8009
      TIDEPOOL_AUTH_CLIENT_EXTERNAL_ADDRESS: http://${STYX_HOST}:8009
      TIDEPOOL_AUTH_CLIENT_EXTERNAL_SERVER_SESSION_TOKEN_SECRET: '${SERVER_SECRET}'
      TIDEPOOL_AUTH_SERVICE_SERVER_ADDRESS: :${PLATFORM_AUTH_PORT_PREFIX}9222
      TIDEPOOL_BLOB_SERVICE_SERVER_ADDRESS: :${PLATFORM_BLOB_PORT_PREFIX}9225
      TIDEPOOL_DATA_SERVICE_SERVER_ADDRESS: :${PLATFORM_DATA_PORT_PREFIX}9220
      TIDEPOOL_NOTIFICATION_SERVICE_SERVER_ADDRESS: :${PLATFORM_NOTIFICATION_PORT_PREFIX}9223
      TIDEPOOL_TASK_SERVICE_SERVER_ADDRESS: :${PLATFORM_TASK_PORT_PREFIX}9224
      TIDEPOOL_USER_SERVICE_SERVER_ADDRESS: :${PLATFORM_USER_PORT_PREFIX}9221
      TIDEPOOL_AUTH_SERVICE_DOMAIN: ${API_HOST}
      TIDEPOOL_BLOB_SERVICE_UNSTRUCTURED_STORE_TYPE: ${PLATFORM_BLOB_SERVICE_UNSTRUCTURED_STORE_TYPE}
      TIDEPOOL_BLOB_SERVICE_UNSTRUCTURED_STORE_FILE_DIRECTORY: ${PLATFORM_BLOB_SERVICE_UNSTRUCTURED_STORE_FILE_DIRECTORY}
      TIDEPOOL_BLOB_SERVICE_UNSTRUCTURED_STORE_S3_BUCKET: ${PLATFORM_BLOB_SERVICE_UNSTRUCTURED_STORE_S3_BUCKET}
      TIDEPOOL_BLOB_SERVICE_UNSTRUCTURED_STORE_S3_PREFIX: ${PLATFORM_BLOB_SERVICE_UNSTRUCTURED_STORE_S3_PREFIX}
      TIDEPOOL_AUTH_SERVICE_SECRET: '${PLATFORM_AUTH_SERVICE_SECRET}'
      TIDEPOOL_BLOB_SERVICE_SECRET: '${PLATFORM_BLOB_SERVICE_SECRET}'
      TIDEPOOL_DATA_SERVICE_SECRET: '${PLATFORM_DATA_SERVICE_SECRET}'
      TIDEPOOL_NOTIFICATION_SERVICE_SECRET: '${PLATFORM_NOTIFICATION_SERVICE_SECRET}'
      TIDEPOOL_TASK_SERVICE_SECRET: '${PLATFORM_TASK_SERVICE_SECRET}'
      TIDEPOOL_USER_SERVICE_SECRET: '${PLATFORM_USER_SERVICE_SECRET}'
      TIDEPOOL_DEXCOM_CLIENT_ADDRESS: https://api.dexcom.com
      TIDEPOOL_SERVICE_PROVIDER_DEXCOM_CLIENT_ID: '${SERVICE_PROVIDER_DEXCOM_CLIENT_ID}'
      TIDEPOOL_SERVICE_PROVIDER_DEXCOM_CLIENT_SECRET: '${SERVICE_PROVIDER_DEXCOM_CLIENT_SECRET}'
      TIDEPOOL_SERVICE_PROVIDER_DEXCOM_AUTHORIZE_URL: https://api.dexcom.com/v1/oauth2/login
      TIDEPOOL_SERVICE_PROVIDER_DEXCOM_TOKEN_URL: https://api.dexcom.com/v1/oauth2/token
      TIDEPOOL_SERVICE_PROVIDER_DEXCOM_REDIRECT_URL: http://${API_HOST}:8009/v1/oauth/dexcom/redirect
      TIDEPOOL_SERVICE_PROVIDER_DEXCOM_SCOPES: offline_access
      TIDEPOOL_SERVICE_PROVIDER_DEXCOM_STATE_SALT: '${SERVICE_PROVIDER_DEXCOM_STATE_SALT}'

  platform-blob:
    image: tidepool/platform-blob
    # build:
    #   context: ${PLATFORM_BLOB_DIR}
    #   dockerfile: Dockerfile.blob
    #   target: ${PLATFORM_BLOB_BUILD_TARGET}
    # volumes:
    #   - ${PLATFORM_BLOB_DIR}:/go/src/github.com/tidepool-org/platform:cached
    #   - /go/src/github.com/tidepool-org/platform/_bin
    #   - /go/src/github.com/tidepool-org/platform/_data
    ports:
      - '${PLATFORM_BLOB_PORT_PREFIX}9225:${PLATFORM_BLOB_PORT_PREFIX}9225'
    environment: *platform-environment

  platform-data:
    image: data:pre-dblp
    # build:
    #   context: ${PLATFORM_DATA_DIR}
    #   dockerfile: Dockerfile.data
    #   target: ${PLATFORM_DATA_BUILD_TARGET}
    # volumes:
    #   - ${PLATFORM_DATA_DIR}:/go/src/github.com/tidepool-org/platform:cached
    #   - /go/src/github.com/tidepool-org/platform/_bin
    ports:
      - '${PLATFORM_DATA_PORT_PREFIX}9220:${PLATFORM_DATA_PORT_PREFIX}9220'
    environment: *platform-environment

  platform-migrations:
    image: tidepool/platform-migrations
    # build:
    #   context: ${PLATFORM_MIGRATIONS_DIR}
    #   dockerfile: Dockerfile.migrations
    #   target: ${PLATFORM_MIGRATIONS_BUILD_TARGET}
    # volumes:
    #   - ${PLATFORM_MIGRATIONS_DIR}:/go/src/github.com/tidepool-org/platform:cached
    #   - /go/src/github.com/tidepool-org/platform/_bin
    environment: *platform-environment

  platform-notification:
    image: tidepool/platform-notification
    # build:
    #   context: ${PLATFORM_NOTIFICATION_DIR}
    #   dockerfile: Dockerfile.notification
    #   target: ${PLATFORM_NOTIFICATION_BUILD_TARGET}
    # volumes:
    #   - ${PLATFORM_NOTIFICATION_DIR}:/go/src/github.com/tidepool-org/platform:cached
    #   - /go/src/github.com/tidepool-org/platform/_bin
    ports:
      - '${PLATFORM_NOTIFICATION_PORT_PREFIX}9223:${PLATFORM_NOTIFICATION_PORT_PREFIX}9223'
    environment: *platform-environment

  platform-task:
    image: tidepool/platform-task
    # build:
    #   context: ${PLATFORM_TASK_DIR}
    #   dockerfile: Dockerfile.task
    #   target: ${PLATFORM_TASK_BUILD_TARGET}
    # volumes:
    #   - ${PLATFORM_TASK_DIR}:/go/src/github.com/tidepool-org/platform:cached
    #   - /go/src/github.com/tidepool-org/platform/_bin
    ports:
      - '${PLATFORM_TASK_PORT_PREFIX}9224:${PLATFORM_TASK_PORT_PREFIX}9224'
    environment: *platform-environment

  platform-tools:
    image: tidepool/platform-tools
    # build:
    #   context: ${PLATFORM_TOOLS_DIR}
    #   dockerfile: Dockerfile.tools
    #   target: ${PLATFORM_TOOLS_BUILD_TARGET}
    # volumes:
    #   - ${PLATFORM_TOOLS_DIR}:/go/src/github.com/tidepool-org/platform:cached
    #   - /go/src/github.com/tidepool-org/platform/_bin
    environment: *platform-environment

  platform-user:
    image: tidepool/platform-user
    # build:
    #   context: ${PLATFORM_USER_DIR}
    #   dockerfile: Dockerfile.user
    #   target: ${PLATFORM_USER_BUILD_TARGET}
    # volumes:
    #   - ${PLATFORM_USER_DIR}:/go/src/github.com/tidepool-org/platform:cached
    #   - /go/src/github.com/tidepool-org/platform/_bin
    ports:
      - '${PLATFORM_USER_PORT_PREFIX}9221:${PLATFORM_USER_PORT_PREFIX}9221'
    environment: *platform-environment

  seagull:
    image: tidepool/seagull
    depends_on:
      - hakken
    # build: ${SEAGULL_DIR}
    # volumes:
    #   - ${SEAGULL_DIR}:/app:cached
    #   - /app/node_modules
    ports:
      - '${SEAGULL_PORT_PREFIX}9120:${SEAGULL_PORT_PREFIX}9120'
    environment:
      DISCOVERY_HOST: ${HAKKEN_HOST}:8000
      GATEKEEPER_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${GATEKEEPER_HOST}:9123"}]}'
      METRICS_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${HIGHWATER_HOST}:9191"}]}'
      MONGO_CONNECTION_STRING: mongodb://${MONGO_HOST}/seagull?ssl=${MONGO_TLS}
      NODE_ENV: development
      PORT: '${SEAGULL_PORT_PREFIX}9120'
      PUBLISH_HOST: ${HAKKEN_HOST}
      SALT_DEPLOY: '${SEAGULL_SALT}'
      SERVER_SECRET: '${SERVER_SECRET}'
      SERVICE_NAME: seagull
      USER_API_SERVICE: '{"type": "static", "hosts": [{"protocol": "http", "host": "${SHORELINE_HOST}:9107"}]}'

  shoreline:
    image: tidepool/shoreline
    depends_on:
      - hakken
    # build:
    #   context: ${SHORELINE_DIR}
    #   target: ${SHORELINE_BUILD_TARGET}
    # volumes:
    #   - ${SHORELINE_DIR}:/go/src/github.com/tidepool-org/shoreline:cached
    #   - /go/src/github.com/tidepool-org/shoreline/dist
    ports:
      - '${SHORELINE_PORT_PREFIX}9107:${SHORELINE_PORT_PREFIX}9107'
    environment:
      TIDEPOOL_SHORELINE_ENV: |
        {
            "gatekeeper": {"serviceSpec": {"type": "static", "hosts": ["http://${GATEKEEPER_HOST}:9123"]}},
            "hakken": {"host": "${HAKKEN_HOST}:8000"},
            "highwater": {
                "metricsSource": "shoreline",
                "metricsVersion": "v0.0.1",
                "name": "highwater",
                "serviceSpec": {"type": "static", "hosts": ["http://${HIGHWATER_HOST}:9191"]}
            }
        }
      TIDEPOOL_SHORELINE_SERVICE: |
        {
            "mongo": {
                "connectionString": "mongodb://${MONGO_HOST}/user?ssl=${MONGO_TLS}"
            },
            "oauth2": {
                "expireDays": 14
            },
            "service": {
                "certFile": "config/cert.pem",
                "host": "localhost:${SHORELINE_PORT_PREFIX}9107",
                "keyFile": "config/key.pem",
                "protocol": "http",
                "service": "shoreline"
            },
            "user": {
                "apiSecret": "${SHORELINE_API_SECRET}",
                "clinicDemoUserId": "",
                "longTermDaysDuration": 30,
                "longTermKey": "${SHORELINE_LONG_TERM_KEY}",
                "salt": "${SHORELINE_SALT}",
                "serverSecret": "${SERVER_SECRET}",
                "tokenDurationSecs": 2592000,
                "verificationSecret": "${SHORELINE_VERIFICATION_SECRET}"
            }
        }

  styx:
    image: tidepool/styx
    depends_on:
      - hakken
    # build: ${STYX_DIR}
    # volumes:
    #   - ${STYX_DIR}:/app:cached
    #   - /app/node_modules
    ports:
      - '${STYX_PORT_PREFIX}8009-${STYX_PORT_PREFIX}8010:${STYX_PORT_PREFIX}8009-${STYX_PORT_PREFIX}8010'
    environment:
      DISCOVERY: '{"host": "${HAKKEN_HOST}:8000"}'
      HTTPS_CONFIG: '{"cert": "${STYX_TLS_CERTIFICATE}", "key": "${STYX_TLS_PRIVATE_KEY}"}'
      HTTPS_PORT: '${STYX_PORT_PREFIX}8010'
      HTTP_PORT: '${STYX_PORT_PREFIX}8009'
      NODE_ENV: development
      RULES: |
        {
          "http": {
            "*": [
              {
                "type": "cors",
                "headers": {
                  "access-control-allow-origin": "*",
                  "access-control-allow-headers": "authorization, content-type, x-tidepool-session-token, x-tidepool-trace-request, x-tidepool-trace-session",
                  "access-control-allow-methods": "GET, POST, PUT, PATCH, DELETE",
                  "access-control-expose-headers": "x-tidepool-session-token, x-tidepool-trace-request, x-tidepool-trace-session",
                  "access-control-max-age": 0
                }
              },
              {"type": "pathPrefix", "prefix": "/access",                           "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${GATEKEEPER_HOST}:9123"}]}},
              {"type": "pathPrefix", "prefix": "/auth",                                                   "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${SHORELINE_HOST}:9107"}]}},
              {"type": "pathPrefix", "prefix": "/confirm",                                                "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${HYDROPHONE_HOST}:9157"}]}},
              {"type": "pathPrefix", "prefix": "/data/",                                                  "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${TIDE_WHISPERER_HOST}:9127"}]}},
              {"type": "pathPrefix", "prefix": "/dataservices",                                           "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathPrefix", "prefix": "/message",                                                "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${MESSAGE_API_HOST}:9119"}]}},
              {"type": "pathPrefix", "prefix": "/metadata",                                               "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${SEAGULL_HOST}:9120"}]}},
              {"type": "pathPrefix", "prefix": "/metrics",                                                "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${HIGHWATER_HOST}:9191"}]}},
              {"type": "pathPrefix", "prefix": "/userservices",                                           "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_USER_HOST}:9221"}]}},
              {"type": "pathMatch",  "match":  "/v1/users/[^/]+/restricted_tokens",                       "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_AUTH_HOST}:9222"}]}},
              {"type": "pathMatch",  "match":  "/v1/users/[^/]+/provider_sessions",                       "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_AUTH_HOST}:9222"}]}},
              {"type": "pathMatch",  "match":  "/v1/users/[^/]+/data_sources",                            "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathMatch",  "match":  "/v1/users/[^/]+/data_sets",                               "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathMatch",  "match":  "/v1/users/[^/]+/datasets",                                "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathMatch",  "match":  "/v1/users/[^/]+/data",                                    "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathMatch",  "match":  "/v1/users/[^/]+/blobs",                                   "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_BLOB_HOST}:9225"}]}},
              {"type": "pathPrefix", "prefix": "/v1/users",                         "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_USER_HOST}:9221"}]}},
              {"type": "pathPrefix", "prefix": "/v1/time",                          "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathPrefix", "prefix": "/v1/tasks",                         "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_TASK_HOST}:9224"}]}},
              {"type": "pathPrefix", "prefix": "/v1/restricted_tokens",             "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_AUTH_HOST}:9222"}]}},
              {"type": "pathPrefix", "prefix": "/v1/provider_sessions",             "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_AUTH_HOST}:9222"}]}},
              {"type": "pathPrefix", "prefix": "/v1/data_sources",                  "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathPrefix", "prefix": "/v1/data_sets",                     "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathPrefix", "prefix": "/v1/datasets",                      "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathMatch",  "match":  "/v1/data",                                                "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_DATA_HOST}:9220"}]}},
              {"type": "pathPrefix", "prefix": "/v1/blobs",                         "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_BLOB_HOST}:9225"}]}},
              {"type": "pathPrefix", "prefix": "/v1/oauth",                         "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PLATFORM_AUTH_HOST}:9222"}]}},

              {"type": "pathMatch", "match": "/autoconf", "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${CONFIRM_EMAIL_HOST}:9508"}]}},
              {"type": "pathPrefix", "prefix": "/organization", "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PORTAL_HOST}:9507"}]}},
              {"type": "pathPrefix", "prefix": "/api", "stripPrefix": false, "rule": {"type": "staticService", "hosts": [{"protocol": "http", "host": "${PORTAL_HOST}:9507"}]}},
              {
                "type": "pathPrefix",
                "prefix": "/mis",
                "stripPrefix": false,
                "rule": {
                  "type": "staticService",
                  "hosts": [{
                      "protocol": "http",
                      "host": "${PORTAL_HOST}:9510"
                    }
                  ]
                }
              }
            ]
          },
          "https": {
            "*": [
              {"type": "redirect", "host": "http://${STYX_HOST}:8009"}
            ]
          }
        }

  tide-whisperer:
    image: tidepool/tide-whisperer
    depends_on:
      - hakken
    # build:
    #   context: ${TIDE_WHISPERER_DIR}
    #   target: ${TIDE_WHISPERER_BUILD_TARGET}
    # volumes:
    #   - ${TIDE_WHISPERER_DIR}:/go/src/github.com/tidepool-org/tide-whisperer:cached
    #   - /go/src/github.com/tidepool-org/tide-whisperer/dist
    ports:
      - '${TIDE_WHISPERER_PORT_PREFIX}9127:${TIDE_WHISPERER_PORT_PREFIX}9127'
    environment:
      TIDEPOOL_TIDE_WHISPERER_ENV: |
        {
            "auth": {
              "address": "http://${PLATFORM_AUTH_HOST}:9222",
              "serviceSecret": "${PLATFORM_AUTH_SERVICE_SECRET}",
              "userAgent": "Tidepool-TideWhisperer"
            },
            "gatekeeper": {"serviceSpec": {"type": "static", "hosts": ["http://${GATEKEEPER_HOST}:9123"]}},
            "hakken": {"host": "${HAKKEN_HOST}:8000"},
            "seagull": {"serviceSpec": {"type": "static", "hosts": ["http://${SEAGULL_HOST}:9120"]}},
            "shoreline": {
                "name": "tide-whisperer",
                "secret": "${SERVER_SECRET}",
                "serviceSpec": {"type": "static", "hosts": ["http://${SHORELINE_HOST}:9107"]},
                "tokenRefreshInterval": "1h"
            }
        }
      TIDEPOOL_TIDE_WHISPERER_SERVICE: |
        {
            "mongo": {
                "connectionString": "mongodb://${MONGO_HOST}/data?ssl=${MONGO_TLS}"
            },
            "schemaVersion": {
                "maximum": 99,
                "minimum": 1
            },
            "service": {
                "certFile": "config/cert.pem",
                "host": "localhost:${TIDE_WHISPERER_PORT_PREFIX}9127",
                "keyFile": "config/key.pem",
                "protocol": "http",
                "service": "tide-whisperer"
            }
        }

  # viz:
  #   image: tidepool/viz
  #   volumes:
  #     - ${VIZ_DIR}:/app:cached
  #     - /app/node_modules
  #     - viz-dist:/app/dist
  #   environment:
  #     NODE_ENV: development
  #   ports:
  #     - '8081:8081'
  #     - '8082:8082'

  confirm-email:
    image: mdbl/confirm-email
    ports:
      - '9508:9508'
    environment:
      PORT: ${CONFIRM_EMAIL_PORT}
      MONGO_USER_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/user'
      DIABELOOP_SECRET: '${CONFIRM_EMAIL_SECRET}'
      CRYPTOGRAPHY: ${CONFIRM_EMAIL_CRYPTOGRAPHY}
      SERVER: ${CONFIRM_EMAIL_HOST}

  mis-api:
    image: mis-api
    ports:
      - '9510:9510'
    environment:
      MONGO_USER_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/user'
      MONGO_GATEKEEPER_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/gatekeeper'
      MONGO_PORTAL_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/portal'
      MONGO_SEAGULL_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/seagull'
      MONGO_DATA_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/data'
      MONGO_MIS_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/mis'
      TIDEPOOL_API_HOST: 'http://${API_HOST}:8009'
      MDBLP_API_HOST: 'localhost'
      MDBLP_API_PORT: '9510'
      MDBLP_API_LOGLEVEL: 'Info'
      MDBLP_API_LOGFILE: '../mis.log'

  portal-api:
    image: portal-api
    ports:
      - '9507:9507'
    environment:
      MONGO_USER_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/user'
      MONGO_GATEKEEPER_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/gatekeeper'
      MONGO_PORTAL_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/portal'
      MONGO_SEAGULL_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/seagull'
      MONGO_DATA_CONNECTION_STRING: 'mongodb://${MONGO_HOST}/data'
      API_HOST: 'http://localhost:8009'
      GATEKEEPER_SECRET_KEY: '${GATEKEEPER_SECRET}'
      HOST: 'localhost'
      PORT: 9507
      DEFAULT_ADMIN_EMAIL: 'admin@portal.com'
      DEFAULT_ADMIN_PASSWORD: 'password'
      DEFAULT_ADMIN_USERID: 'portal-admin'
      SHORELINE_PASSWORD_SALT: '${SHORELINE_SALT}'

volumes:
  mongo:
